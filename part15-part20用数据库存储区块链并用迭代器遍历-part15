part15 :创建创世区块存储到数据库


1、Blockchain区块链对象--》 1.数据库   2.最新区块的hash
2、在数据库中   1、每一个hash对应一个block   2、再存储一个最新区块的hash用于遍历区块链
                                            b.Put([]byte("l"),genesisBlock.Hash)

blockchain.go
type Blockchain struct{
	Tip  []byte //最新的区块的Hash
	DB  *bolt.DB
}
//1.创建带有创世区块的区块链
func CreateBlockchainWithGenesisBlock()*Blockchain{
	//创建或者打开数据库
	db, err := bolt.Open(dbName, 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	var  blockHash  []byte
	err=db.Update(func(tx *bolt.Tx) error {
		//先获取表
		b:=tx.Bucket([]byte(blockTableName))
		//如果没有之前创建表
		if  b==nil{
			//创建创建数据库表
			b,err=tx.CreateBucket([]byte(blockTableName))
			if err!=nil{
				log.Panic(err)
			}
		}
		if b!=nil{
			//创建创世区块
			genesisBlock:=CreateGensisBlock("Genesis Data............")
			//将创世区块存储到表中
			err:=b.Put(genesisBlock.Hash,genesisBlock.Serialize())
			if err!=nil{
				log.Panic(err)

			}
			//存储最新的区块的hash
			err=b.Put([]byte("l"),genesisBlock.Hash)
			if err!=nil{
				log.Panic(err)

			}
			blockHash=genesisBlock.Hash
		}
		return  nil

	})

	 return &Blockchain{blockHash,db}

}


part16 --新增区块存储到数据库
//增加区块到区块链里面
func (blc *Blockchain)AddBlockToBlockChain(data  string ){

	//创建新的区块

	err:=blc.DB.Update(func(tx *bolt.Tx)error{

		//1获取表
		b:=tx.Bucket([]byte(blockTableName))
		//2 创建新区块
		if b!=nil {

			//注意：先获取最新区块
			blockBytes:=b.Get(blc.Tip)
			//反序列化
			block:=DeserializeBlock(blockBytes)


			//3 将区块序列化并且存储到数据库中
			newBlock := NewBlock(data,block.Height+1 , block.Hash)
			err := b.Put(newBlock.Hash, newBlock.Serialize())
			if err != nil {
				log.Panic(err)
			}
			//4更新数据库里面"l"对应的hash
			err = b.Put([]byte("l"), newBlock.Hash)
			if err != nil {
				log.Panic(err)
			}
			//5 更新blockchain的Tip
			blc.Tip = newBlock.Hash
		}
		return  nil
	})
	if  err!=nil{
		log.Panic(err)
	}
}


part17  --普通遍历方法
func (blc *Blockchain)PrintChain() {

	blockchainIterator := blc.Iterator()


	for {
		//娶到最新区块
		block := blockchainIterator.Next()

		fmt.Printf("Height:%d\n",block.Height)
		fmt.Printf("PrevBlockHash:%x\n",block.PrevBlockHash)
		fmt.Printf("Date:%s\n",block.Date)
		fmt.Printf("Timestamp:%s\n",
			time.Unix(block.Timestamp,0).Format("2006-01-02 03:04:05 PM"))
		fmt.Printf("Hash:%x\n",block.Hash)
		fmt.Printf("Nonce:%d\n",block.Nonce)

		fmt.Println()

		var hashInt big.Int
		hashInt.SetBytes(block.PrevBlockHash)
		if big.NewInt(0).Cmp(&hashInt) == 0 {
			break
		}
	}
}
